from fastapi import APIRouter, HTTPException, Depends, status
from fastapi.responses import JSONResponse
from models.types import UserCreate, UserLogin, Token, User
from core.database import db
from core.auth import create_access_token, get_current_active_user
from datetime import timedelta
import logging

logger = logging.getLogger(__name__)

router = APIRouter()

@router.post("/register", response_model=Token)
async def register_user(user_data: UserCreate):
    """Register a new user"""
    # Check if user already exists
    existing_user = db.get_user_by_email(user_data.email)
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered"
        )
    
    # Create new user
    user = db.create_user(user_data)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to create user"
        )
    
    # Create access token
    access_token = create_access_token(
        data={"sub": user.email},
        expires_delta=timedelta(hours=24)
    )
    
    logger.info(f"New user registered: {user.email}")
    
    return Token(
        access_token=access_token,
        token_type="bearer",
        user=user
    )

@router.post("/login", response_model=Token)
async def login_user(user_data: UserLogin):
    """Login user with email and password"""
    # Authenticate user
    user = db.authenticate_user(user_data.email, user_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # Create access token
    access_token = create_access_token(
        data={"sub": user.email},
        expires_delta=timedelta(hours=24)
    )
    
    logger.info(f"User logged in: {user.email}")
    
    return Token(
        access_token=access_token,
        token_type="bearer",
        user=user
    )

@router.get("/me", response_model=User)
async def get_current_user_info(current_user: User = Depends(get_current_active_user)):
    """Get current user information"""
    return current_user

@router.get("/my-pdfs")
async def get_user_pdfs(current_user: User = Depends(get_current_active_user)):
    """Get all PDFs generated by the current user"""
    user_pdfs = db.get_user_pdfs(current_user.id)
    return JSONResponse(content={"pdfs": user_pdfs}) 